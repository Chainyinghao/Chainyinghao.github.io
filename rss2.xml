<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"
  xmlns:atom="http://www.w3.org/2005/Atom"
  xmlns:content="http://purl.org/rss/1.0/modules/content/">
  <channel>
    <title>听云轩</title>
    <link>https://Chainyinghao.github.io/</link>
    <atom:link href="/rss2.xml" rel="self" type="application/rss+xml"/>
    
    <description>世间所有的相遇，都是久别重逢</description>
    <pubDate>Fri, 08 May 2020 06:41:24 GMT</pubDate>
    <generator>http://hexo.io/</generator>
    
    <item>
      <title>openstack（七）</title>
      <link>https://Chainyinghao.github.io/2020/05/06/openstack-6/</link>
      <guid>https://Chainyinghao.github.io/2020/05/06/openstack-6/</guid>
      <pubDate>Wed, 06 May 2020 07:42:13 GMT</pubDate>
      <description>
      
        
        
          &lt;h4 id=&quot;cinder服务&quot;&gt;cinder服务&lt;/h4&gt;
&lt;p&gt;    cinder是openstack的块存储服务，它负责volume从创建到删除整个生命周期的管理，其中具体包括：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;通过对外提供API，使得可以查询和管理volume、volume
        
      
      </description>
      
      <content:encoded><![CDATA[<h4 id="cinder服务">cinder服务</h4><p>    cinder是openstack的块存储服务，它负责volume从创建到删除整个生命周期的管理，其中具体包括：</p><ul><li>通过对外提供API，使得可以查询和管理volume、volume snapshot和volume type。</li><li>提供scheduler来完成volume的调度，合理优化存储资源的分配。</li><li>提供driver框架来支持多种存储的后端，包括LVM、ceph和其他商业存储（EMC、华为存储等等）。</li></ul><h6 id="组件">组件</h6><p>1、cinder-api</p><p>    客户端可以将请求发送到endpoints指定的地址，向cinder-api请求操作。Cinder-api对接收到的HTTP API请求做如下处理：</p><ul><li>检查客户端传入的参数是否合法有效</li><li>调用cinder其他子服务处理客户端请求</li><li>将cinder其他子服务返回的结果序列号返回给客户端</li></ul><p>2、cinder-scheduler</p><p>    创建volume时，cinder-scheduler会基于容量、volume type等条件选择出最合适的存储节点，然后让其创建volume。</p><p>3、cinder-volume</p><p>    Cinder-volume在存储节点上运行，OpenStack对volume的操作，最后都是交给cinder-volume来完成的。它自己本身是不管理真正的存储设备，存储设备最后都是由volume provider来管理。Cinder-volume将LVM作为默认的volume provider。cinder-volume的作用：</p><ul><li>通过driver架构支持多种volume provider</li><li>定期向OpenStack报告存储节点的状态</li><li>实现volume生命周期的管理</li></ul><p>4、cinder-backup备份提供了三种驱动服务：ceph，TSM，swift，其中默认备份是swift。cinder驱动服务的配置在cinder.conf中是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">backup_driver=cinder.backup.drivers.swift</span><br></pre></td></tr></table></figure><p>详细可参考这里：[<a href="https://blog.csdn.net/u010433148/article/details/54629097" target="_blank" rel="noopener">https://blog.csdn.net/u010433148/article/details/54629097</a>]</p><h4 id="Glance服务">Glance服务</h4><p>    glance是为虚拟机的创建提供镜像的服务，我们基于OpenStack是构建基本的Iaas平台对外提供虚拟机，而虚拟机在创建时必须选择需要安装的操作系统，glance服务就是选择提供不同的操作系统镜像。</p><h6 id="组件-2">组件</h6><ul><li>Glance-API</li></ul><p>    主要用来响应各种REST请求然后通过其他模块（主要是glance-registry组件和后端存储接口）完成镜像的上传、删除、查询等操作。可以简单的再分为两部分：一层中间件，它主要是做一些请求的解析工作（如分析出版本号），另外一部分提供实际的服务（如与镜像上传下载的后端存储接口交互）。默认绑定端口是9292。</p><ul><li>Glance-registry</li></ul><p>    镜像注册服务用于提供镜像元数据的REST接口，主要工作是存储或者获取镜像的元数据，与mysql进行交互，也可以简单的再细分为两部分，API和具体server。元数据是指镜像相关的一些信息（如id，size，status，location，checksum，min_disk，min_ram，owner等）真正的镜像数据保存在实际所使用的后端存储里。默认绑定端口是9191.</p><ul><li>Image store</li></ul><p>    严格来说image store不属于glance的组件，它只是一个接口层，提供镜像存储和查询的接口。</p><h6 id="工作流程">工作流程</h6><p><img src="https://s1.ax1x.com/2020/05/07/Ym68eO.png" alt="Ym68eO.png"></p><p>1、glance-api接收REST API的请求，通过其他模块来完成诸如镜像的创建、删除、查询、获取等操作。</p><p>2、glance-registry与数据库进行交互，更新数据库中的两张表，image和image_proterties表，分别用来记录镜像的大小、格式和镜像定制化的相关信息等，</p>]]></content:encoded>
      
      <comments>https://Chainyinghao.github.io/2020/05/06/openstack-6/#disqus_thread</comments>
    </item>
    
    <item>
      <title>openstack（六）</title>
      <link>https://Chainyinghao.github.io/2020/05/06/openstack-5/</link>
      <guid>https://Chainyinghao.github.io/2020/05/06/openstack-5/</guid>
      <pubDate>Wed, 06 May 2020 07:42:05 GMT</pubDate>
      <description>
      
        
        
          &lt;h4 id=&quot;openstack网络类型（OVS）&quot;&gt;openstack网络类型（OVS）&lt;/h4&gt;
&lt;h6 id=&quot;local&quot;&gt;local&lt;/h6&gt;
&lt;p&gt;    local网络与其他网络和节点隔离，此网络中的实例只能和同一节点上的local网络中的实例之间进行通信，主要用
        
      
      </description>
      
      <content:encoded><![CDATA[<h4 id="openstack网络类型（OVS）">openstack网络类型（OVS）</h4><h6 id="local">local</h6><p>    local网络与其他网络和节点隔离，此网络中的实例只能和同一节点上的local网络中的实例之间进行通信，主要用于单机的一个测试。</p><h5 id="flat">flat</h5><p>    flat是没有VLAN tag的网络，flat网络中的主机实例可以跨节点和同一flat网络中的主机实例通信。宿主机中的物理网卡通过br-int网桥与flat network相连，每一个flat网络都需要占用一个物理网卡。 因此在ml2文件中创建了一个flat网络后 <em>flat_networks=flat1</em>，还需要将其与我们的某一个网桥所绑定<em>bridge_mappings=flat1:br-eth1</em> ，通过这个网桥与我们的物理网卡通信。这时需要通过ovs-vsctl命令创建网桥和相应的设备，比如：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ovs-vsctl add-br br-eth1</span><br><span class="line">ovs-vsctl add-port br-eth1 eth1</span><br></pre></td></tr></table></figure><p>    重启所有节点的neutron服务后，查看ovs网桥情况，此时会发现在网桥br-int和br-eth1上会多了一对peer设备来指向彼此，实例的网卡连接在br-int上，物理网卡eth1连接在br-eth1上，此时两个网桥之间通过那一对peer设备来进行通信。</p><h5 id="VLAN">VLAN</h5><p>    VLAN是带标签的网络，同一个VLAN中的实例可以相互通信，不同VLAN的主机需要通过三层router转发进行通信。在OVS机制下，不同VLAN instance的虚拟网卡都接到br-int上（Linux bridge则是不同的VLAN接到不同的网桥上）。在ml2文件中定义VLAN的label和VLAN号段，比如：<em>network_vlan_ranges=default:3001:4000</em>，然后和flat网络一样需要指定VLAN网络和物理网络的对应关系<em>bridge_mappings=default:br-eth1</em>。重启相关服务后，如果我们创建一个VLAN网络，那么这个时候在br-int上会连接一个tap设备，这个设备是这个VLAN的DHCP接口，br-int和br-eth1之间的通信方式和flat网络一样，通过一对peer设备去通信。</p><h5 id="VXLAN">VXLAN</h5><p>    vxlan网络是基于隧道技术的overlay网络，vxlan网络通过唯一的VNI标识号与其他vxlan区分，也就是说只有相同的VNI号的隧道才能进行通信，vxlan数据包会通过VNI封装成UDP包进行传输，这样将二层的包封装在三层去进行传输，能够克服VLAN和物理网络基础设置的限制。另外，vxlan之间的通信时借助于br-tun网桥进行通信。</p><p>    vxlan的封装和解封是通过VTEP（virtual tunnel endpoint）设备来进行的，每一个VTEP都有一个IP interface，并且配置得有一个IP地址，通过该interface来发送和接收vxlan的数据包。而我们的br-tun网桥其实可以分为两个部分，如图：</p><p><img src="https://s1.ax1x.com/2020/05/06/YVZafU.png" alt="YVZafU.png"></p><p>    上层是VTEP，下层是一个普通的VLAN bridge，所以对于host来说它有两层网络，一部分是VLAN，一部分是vxlan。</p><h5 id="GRE">GRE</h5><p>    GRE是与vxlan类似的一种overlay网络，主要区别是封住的协议不同，GRE采用的是IPIP协议进行封装。</p>]]></content:encoded>
      
      <comments>https://Chainyinghao.github.io/2020/05/06/openstack-5/#disqus_thread</comments>
    </item>
    
    <item>
      <title>cloud-init（二）</title>
      <link>https://Chainyinghao.github.io/2020/04/07/cloud-init-1/</link>
      <guid>https://Chainyinghao.github.io/2020/04/07/cloud-init-1/</guid>
      <pubDate>Tue, 07 Apr 2020 06:42:33 GMT</pubDate>
      <description>
      
        
        
          &lt;h4 id=&quot;初始化判断&quot;&gt;初始化判断&lt;/h4&gt;
&lt;p&gt;    cloud-init主要通过读取/etc/cloud/cloud.cfg配置文件，来执行相应模块，模块一般位于Python第三方包cloud-init目录下:/usr/lib/python2.6/site-pack
        
      
      </description>
      
      <content:encoded><![CDATA[<h4 id="初始化判断">初始化判断</h4><p>    cloud-init主要通过读取/etc/cloud/cloud.cfg配置文件，来执行相应模块，模块一般位于Python第三方包cloud-init目录下:/usr/lib/python2.6/site-packages/cloudinit/config，模块有多种运行模式（frequency），包括PER_INSTANCE, PER_BOOT, PER_ONCE ,PER_ALWAYS，在上述python文件中配置：</p><p><img src="https://s1.ax1x.com/2020/04/07/GgStGq.png" alt="GgStGq.png"></p><p>    模式为per-once的模块，一旦运行完毕会在一个名为sem的目录中创建一个信号文件，从而防止模块的在下次启动时重复运行，若虚拟机初始化时，sem目录中不存在相应的信号文件，Cloudinit则会执行一次，以后都不会执行。</p><p><img src="https://s1.ax1x.com/2020/04/07/GgSdMT.png" alt="GgSdMT.png"></p><p>    对于windows系统，主要有cloudbase-init读取注册表项判断是不是初始化。例如注入密码时，第一次注入之后会在注册表中更新HKEY_LOCAL_MACHINE/SOFTWARE/Cloudbase Sloutions/Cloudbase-Init/实例ID/Plugins/SetUserPasswordPlugin值为1,表示下次不再更新。如果需要从数据源读取密码重新注入，只需删除SetUserPasswordPlugin项目即可。</p><h4 id="相关问题">相关问题</h4><p>    1、在定制实例时，会依次读取配置文件cloud.cfg配置项，在某些环境的主机需配置DNS才能访问外网，通过cloud_config_modules模块的runcmd配置项配置DNS，由于配置项package-update-upgrade-install在runcmd之前，cloud-init会先安装软件，这时外网是不通的，所以报错。</p><p><img src="https://s1.ax1x.com/2020/04/07/GgSLSP.png" alt="GgSLSP.png"></p><p><img src="https://s1.ax1x.com/2020/04/07/GgSzwQ.png" alt="GgSzwQ.png"></p>]]></content:encoded>
      
      <comments>https://Chainyinghao.github.io/2020/04/07/cloud-init-1/#disqus_thread</comments>
    </item>
    
    <item>
      <title>cloud-init（一）</title>
      <link>https://Chainyinghao.github.io/2020/04/07/cloud-init/</link>
      <guid>https://Chainyinghao.github.io/2020/04/07/cloud-init/</guid>
      <pubDate>Tue, 07 Apr 2020 05:51:50 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;    cloud-init是一个支持多操作系统的软件包，用于处理云主机早期的初始化操作，当系统启动时，cloud-init可以在云的datasource中获取metadata（nova metadata服务或者config drive（config drive是一个特殊的
        
      
      </description>
      
      <content:encoded><![CDATA[<p>    cloud-init是一个支持多操作系统的软件包，用于处理云主机早期的初始化操作，当系统启动时，cloud-init可以在云的datasource中获取metadata（nova metadata服务或者config drive（config drive是一个特殊的文件系统，openstack会将metadata写到config drive，并在instance启动的时候挂载给instance，然后去读metadata）），完成包括但不限于下面所列举的定制化工作：</p><ul><li>设置default locale</li><li>设置云主机hostname</li><li>生成实例的SSH私钥</li><li>添加SSH KEYS到.ssh/authorized_keys ，使用户可以登录</li><li>设置临时挂载点</li><li>设置用户密码</li><li>配置网络</li><li>安装软件包</li></ul><p><img src="https://s1.ax1x.com/2020/04/07/GcToIU.png" alt="GcToIU.png"></p><p>    从图中可知道相关的一个流程：当cloud-init启动后会去读取源数据，如果配置了dhcp服务，则去nova-metadata中读取，如果没有配置的话就去cloud drive读取；当去metadata里面去读的话默认是从l3-agent里面读取。</p><p>注：云主机中lsblk查看块设备，挂载/dev/sr0,进入这个目录可以查看相关文件：</p><p><img src="https://s1.ax1x.com/2020/04/07/Gc7edf.png" alt="Gc7edf.png"></p><p>    我们查看日志进行分析：<br>    第一阶段：扫描文件系统、挂载/dev/sr0，读取数据，卸载、加载config driver、读取文件cloud.cfg。</p><p><img src="https://s1.ax1x.com/2020/04/07/Gc7Bl9.png" alt="Gc7Bl9.png"></p><p><img src="https://s1.ax1x.com/2020/04/07/GcHB4S.png" alt="GcHB4S.png"></p><p>    第二阶段：扫描网卡、配置网卡、写入到文件、配置dns、完成第二阶段</p><p><img src="https://s1.ax1x.com/2020/04/07/GcHo34.png" alt="GcHo34.png"></p><p><img src="https://s1.ax1x.com/2020/04/07/GcHqD1.png" alt="GcHqD1.png"></p><p>    第三阶段：init-network，读取check-cache，调用相关cloud_init_module初始化（主机名初始化，check-cache、consume-user-data、consume-vendor-data、config-migrator、config-bootcmd、config-write-files、config-growpart、config-resizefs、config-set_hostname、config-update_etc_hosts、config-rsyslog、config-users-groups、config-ssh）</p><p><img src="https://s1.ax1x.com/2020/04/07/GcbAVP.png" alt="GcbAVP.png"></p><p><img src="https://s1.ax1x.com/2020/04/07/Gcbm8g.png" alt="Gcbm8g.png"></p><p>    第四阶段：调用config_modules的相关模块，mounts，locale，set-passwords，yum-add-repo，package-update-upgrade-install，timezone，puppet，chef，salt-minion，mcollective，disable-ec2-metadata，runcmd</p><p><img src="https://s1.ax1x.com/2020/04/07/GcbdM9.png" alt="GcbdM9.png"></p><p>    第五阶段：调用final_modules模块，config-rightscale_userdata、config-scripts-per-boot、config-scripts-per-instance、config-scripts-user、config-ssh-authkey-fingerprints、config-keys-to-console、config-phone-home、config-final-message</p><p><img src="https://s1.ax1x.com/2020/04/07/GcbhqI.png" alt="GcbhqI.png"></p><p>    cloud-init会在云主机上创建如下的目录结构用来记录相关的信息：</p><p><img src="https://s1.ax1x.com/2020/04/07/GcqkQJ.png" alt="GcqkQJ.png"></p><p>其中：</p><ul><li>data目录会记录云主机的instance id，datasource，hostname等信息</li><li>instances目录下记录了云主机的instance的user-data，cloud-config，用到的datasource，运行的命令等信息。</li><li>scripts下的per-boot存放运行启动脚本，系统引导时运行；per-once：只运行一次脚本；per-instance：一个实例初始化会执行一次</li></ul><p>配置文件cloud.cfg：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br></pre></td><td class="code"><pre><span class="line">users:</span><br><span class="line"> - default</span><br><span class="line"></span><br><span class="line">disable_root: 0</span><br><span class="line">ssh_pwauth:   1</span><br><span class="line"></span><br><span class="line">mount_default_fields: [~, ~, &apos;auto&apos;, &apos;defaults,nofail&apos;, &apos;0&apos;, &apos;2&apos;]</span><br><span class="line">resize_rootfs_tmp: /dev</span><br><span class="line">ssh_deletekeys:   0</span><br><span class="line">ssh_genkeytypes:  ~</span><br><span class="line">syslog_fix_perms: ~</span><br><span class="line"></span><br><span class="line">cloud_init_modules:</span><br><span class="line"> - migrator</span><br><span class="line"> - bootcmd</span><br><span class="line"> - write-files</span><br><span class="line"> - growpart</span><br><span class="line"> - resizefs</span><br><span class="line"> - set_hostname</span><br><span class="line"> - update_hostname</span><br><span class="line"> - update_etc_hosts</span><br><span class="line"> - rsyslog</span><br><span class="line"> - users-groups</span><br><span class="line"> - ssh</span><br><span class="line"></span><br><span class="line">cloud_config_modules:</span><br><span class="line"> - mounts</span><br><span class="line"> - locale</span><br><span class="line"> - set-passwords</span><br><span class="line"> - yum-add-repo</span><br><span class="line"> - package-update-upgrade-install</span><br><span class="line"> - timezone</span><br><span class="line"> - puppet</span><br><span class="line"> - chef</span><br><span class="line"> - salt-minion</span><br><span class="line"> - mcollective</span><br><span class="line"> - disable-ec2-metadata</span><br><span class="line"> - runcmd</span><br><span class="line"></span><br><span class="line">cloud_final_modules:</span><br><span class="line"> - rightscale_userdata</span><br><span class="line"> - scripts-per-once</span><br><span class="line"> - scripts-per-boot</span><br><span class="line"> - scripts-per-instance</span><br><span class="line"> - scripts-user</span><br><span class="line"> - ssh-authkey-fingerprints</span><br><span class="line"> - keys-to-console</span><br><span class="line"> - phone-home</span><br><span class="line"> - final-message</span><br><span class="line"></span><br><span class="line">system_info:</span><br><span class="line">  default_user:</span><br><span class="line">    name: ec2-user</span><br><span class="line">    lock_passwd: true</span><br><span class="line">    gecos: Cloud User</span><br><span class="line">    groups: [wheel, adm, systemd-journal]</span><br><span class="line">    sudo: [&quot;ALL=(ALL) NOPASSWD:ALL&quot;]</span><br><span class="line">    shell: /bin/bash</span><br><span class="line">  distro: rhel</span><br><span class="line">  paths:</span><br><span class="line">    cloud_dir: /var/lib/cloud</span><br><span class="line">    templates_dir: /etc/cloud/templates</span><br><span class="line">  ssh_svcname: sshd</span><br><span class="line"></span><br><span class="line"># vim:syntax=yaml</span><br></pre></td></tr></table></figure><p>    cloud-init安装时会将这几个阶段执行的任务以服务的形式注册到系统中，比如在systemd的环境下，我们能够看到这几个阶段分别对应的服务：</p><ul><li>generator - cloud-config.target</li><li>local - cloud-init-local.service</li><li>nework - cloud-init.service</li><li>config - cloud-config.service</li><li>final - cloud-final.service</li></ul><p>这些进程只会执行一次，不会以常驻进程的形式存在:</p><ul><li>generator</li></ul><p>    读取配置文件cloud.cfg</p><ul><li>local</li></ul><p>    此时instance还不知道该如何配置网卡，cloud-init的任务就是从config drive中获取配置信息，然后写入/etc/network/interfaces文件，如果没有config drive，则将所有网卡配置成dhcp模式，只有当网卡正确配置以后，才能获取到metadata。</p><ul><li>network</li></ul><p>    在local阶段之后，当网络设置完成了才进行这个阶段，这个阶段会调用。两个模块disk_setup，mounts来完成磁盘格式化分区，添加挂载点等操作，另外执行一些系统引导早期可以调用的模块，读取cloud_init_modules模块的指定配置。</p><ul><li>config</li></ul><p>    执行配置模块，读取cloud_config_modules模块的指定配置</p><ul><li>final</li></ul><p>    这个阶段初始化已经基本完成，因此大部分的模块在这个阶段都能正常运行，比如安装软件，运行一些自动化工具，如puppet，salt等，以及用户定义的脚本。</p><h5 id="cloud-init传入脚本">cloud-init传入脚本</h5><p>比如设置hostname：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">#cloud-config</span><br><span class="line">hostname: my1.cloudman.cc</span><br><span class="line">manage_etc_hosts: true</span><br></pre></td></tr></table></figure><p>    cloud-init 只会读取以 #cloud-config 开头的数据，所以这一行一定要写对。hostname: <a href="http://my1.cloudman.cc" target="_blank" rel="noopener">http://my1.cloudman.cc</a> 告诉 cloud-init 将 hostname 设置为 <a href="http://my1.cloudman.cc" target="_blank" rel="noopener">http://my1.cloudman.cc</a>。manage_etc_hosts: true 告诉 cloud-init 更新 /etc/hosts 文件。</p><p>脚本传递到instance：</p><ul><li>instance 部署时，直接将其粘贴到 Customization Script 输入框中（社区版）</li><li>将其保存为文件，命令行 nova boot 或者 openstack server create 部署 instance 时，使用参数 --user-data 传入。</li><li>将其保存为文件进行上传</li></ul><p><img src="https://s1.ax1x.com/2020/04/07/Gcz89x.png" alt="Gcz89x.png"></p>]]></content:encoded>
      
      <comments>https://Chainyinghao.github.io/2020/04/07/cloud-init/#disqus_thread</comments>
    </item>
    
    <item>
      <title>openstack（五）</title>
      <link>https://Chainyinghao.github.io/2020/04/07/openstack-4/</link>
      <guid>https://Chainyinghao.github.io/2020/04/07/openstack-4/</guid>
      <pubDate>Tue, 07 Apr 2020 05:34:23 GMT</pubDate>
      <description>
      
        
        
          &lt;h4 id=&quot;neutron组件&quot;&gt;neutron组件&lt;/h4&gt;
&lt;p&gt;    neutron网络服务组件提供虚拟机实例对网络的连接，其中plugins能够提供对多种网络设备和软件的支持，使OpenStack环境的构建和部署具备更多的灵活性，最重要的就是为虚拟机实例提供网络连接
        
      
      </description>
      
      <content:encoded><![CDATA[<h4 id="neutron组件">neutron组件</h4><p>    neutron网络服务组件提供虚拟机实例对网络的连接，其中plugins能够提供对多种网络设备和软件的支持，使OpenStack环境的构建和部署具备更多的灵活性，最重要的就是为虚拟机实例提供网络连接。</p><p>组件：</p><ul><li>Neutron-sever：接收和路由API请求到OpenStack中的网络plug-in.</li><li>OpenStack networking plug-ins and agents：创建端口、网络和子网，提供IP地址。</li><li>Messageing queue：在neutron-sever和agents之间路由信息，同时也会作为一个数据库存储plugins的网络连接状态。</li></ul><p>    neutron网络服务组件利用软件定义提供网络、子网和路由功能，它模仿物理网络设备的功能，在网络中划分多个子网，路由器在不同的子网间传递数据。其中包括二层交换，三层路由，负载均衡，防火墙和VPN等。</p><p>    neutron管理的网络资源包括network、subnet和port，其中network是一个隔离的二层广播域，neutron支持多种类型的network，包括local、flat、VLAN、vxlan和GRE。</p><h4 id="架构">架构</h4><p><img src="https://s1.ax1x.com/2020/04/07/G2wVOA.png" alt="G2wVOA.png"></p><ul><li>Neutron server</li></ul><p>    对外提供网络API，接收请求，并调用plugin处理请求。</p><ul><li>neutron plugin</li></ul><p>     处理neutron server发来的请求，维护网络，并通过调用agent来处理后续工作。根据功能又可以分为core plugins和service plugins。前者负责维护网络中的network、subnet和port；后者提供网络中的routing、防火墙、load balance等。</p><ul><li>neutron agent</li></ul><p>    接收来自plugin的请求，并负责在network provider上真正实现网络功能。</p><ul><li>network provider</li></ul><p>    提供网络服务的虚拟或者物理网络设备，向Linux bridge或者OVS等。</p><ul><li>Queue</li></ul><p>    各组件通过messaging queue通信和调用</p><ul><li>Database</li></ul><p>    用来存放OpenStack的网络状态信息，包括network、subnet、port、router等。</p><p>    将server、plugin部分详细的看，如图：</p><p><img src="https://s1.ax1x.com/2020/04/07/G2rdb9.png" alt="G2rdb9.png"></p><p>其中：</p><ul><li>core API</li></ul><p>    对外提供管理network、subnet和port的restful API。</p><ul><li>extension API</li></ul><p>    对外提供管理router，LBaaS，Firewalld等服务的restful API。</p><ul><li>common service</li></ul><p>    校验和认证API请求。</p><ul><li>neutron core</li></ul><p>    通过调用相应的plugin来处理请求。</p><ul><li>core plugin API</li></ul><p>    定义了core plugin的抽象功能集合，用来响应请求和调用core plugin组件。</p><ul><li>extension plugin API</li></ul><p>    定义了core plugin的抽象功能集合，用来响应请求和调用service plugin组件。</p><ul><li>core plugin</li></ul><p>    维护network、subnet和port的状态；调用相应的agent来处理。</p><ul><li>service plugin</li></ul><p>    实现了routing、Firewall、load balance等；调用相应的agent来处理。</p><h4 id="关于ML2-core-plugin">关于ML2 core plugin</h4><p>    它是neutron在H版本实现的一个新的core plugin，用于替代原有的Linux bridge和OVS，传统的core plugin存在的问题：</p><ul><li>无法使用多个network provider</li></ul><p>    这就说明了以前当你选择了Linux bridge plugin之后就只能选择Linux bridge agent，无法使用其他的虚拟交换机。</p><ul><li>开发新的core plugin工作量大</li></ul><p>    所有传统的core plugin都需要编写大量重复和类似的数据库访问的代码，大大增加了plugin开发和维护的工作量。</p><p>    ML2作为新一代的plugin，提供了一个框架，允许在OpenStack网络中同时使用多种layer2网络技术，不同的节点可以使用不同的网络实现机制。</p><p><img src="https://s1.ax1x.com/2020/04/07/G22TGn.png" alt="G22TGn.png"></p><p>    这样的话，可以在不同节点上分别部署Linux bridge agent、OVS，hyper-V以及其他第三方agent。另外，ML2不但支持异构部署方案，同时能够与现有的agent无缝集成：以前用的agent不需要变，只需要将neutron server上的传统core plugin替换为ML2。</p><h5 id="ML2的架构">ML2的架构</h5><p><img src="https://s1.ax1x.com/2020/05/06/YAHw1H.png" alt="YAHw1H.png"></p><p>    ML2对二层的网络进行抽象和模拟，引入了type drivers和mechanism drivers机制，这两类解耦了neutron所支持的网络类型和提供这些网络的机制，这样的好处就是使得它具有很好的扩展性。</p><p>    其中的网络类型（type）包括：</p><ul><li><p>local</p></li><li><p>flat</p></li><li><p>VLAN</p></li><li><p>vxlan</p></li><li><p>GRE</p></li></ul><p>    mechanism driver负责提供和实现这些网络，并确保其状态，根据后端提供类型可以分为：</p><ul><li>Agent-based：包括Linux bridge和open vswitch</li><li>controller-based：包括opendaylight、VMwareNSX</li><li>基于物理交换机：Cisco nexus等</li></ul><p>    neutron启用ml2，只需要在配置文件中开启就行（neutron.conf）：</p><p><img src="https://s1.ax1x.com/2020/05/06/YAOIRU.png" alt="YAOIRU.png"></p><p>    而关于ml2的配置，则是在（/etc/neutron/plugins/ml2/ml2_conf.ini）：</p><p><img src="https://s1.ax1x.com/2020/05/06/YAXZJf.png" alt="YAXZJf.png"></p>]]></content:encoded>
      
      <comments>https://Chainyinghao.github.io/2020/04/07/openstack-4/#disqus_thread</comments>
    </item>
    
    <item>
      <title>openstack（四）</title>
      <link>https://Chainyinghao.github.io/2020/04/07/openstack-3/</link>
      <guid>https://Chainyinghao.github.io/2020/04/07/openstack-3/</guid>
      <pubDate>Tue, 07 Apr 2020 05:34:15 GMT</pubDate>
      <description>
      
        
        
          &lt;p&gt;    Nova计算服务组件是OpenStack中非常重要、核心的部分，负责承载和管理云计算系统，与其他组件有密切关系。&lt;/p&gt;
&lt;p&gt;    Nova计算服务组件使用基于消息，无共享、松耦合无状态的架构。OpenStack项目中的核心服务组件都运行在多台主机节点上，包括N
        
      
      </description>
      
      <content:encoded><![CDATA[<p>    Nova计算服务组件是OpenStack中非常重要、核心的部分，负责承载和管理云计算系统，与其他组件有密切关系。</p><p>    Nova计算服务组件使用基于消息，无共享、松耦合无状态的架构。OpenStack项目中的核心服务组件都运行在多台主机节点上，包括Nova，cinder，neutron，swift和glance等服务组件，状态信息都存储在数据库中。控制节点服务通过HTTP与内部服务进行交互，但与scheduler服务、网络和卷服务的通信依赖高级消息队列协议进行。为避免消息阻塞而造成长时间等待响应，Nova计算服务组件采用异步调用的机制，当请求被接收后，响应被触发，发送回执，而不关注该请求是否被处理。</p><p>    OpenStack项目中的控制节点服务影响着整个云环境的状态，API服务器为控制节点作为web服务前端而服务，处理各种交互信息，计算节点提供各种计算资源和计算服务，Nova计算服务组件中的网络服务提供虚拟网络。</p><ul><li>driver框架</li></ul><p>    OpenStack作为开放的云操作系统，其开放性体现在采用了基于driver的框架。以nova为例，OpenStack的计算节点支持多种hypervisor。包括KVM、hyper-V、VMware、XEN、docker等。</p><p>    Nova-compute为这些hypervisor定义了统一的接口，hypervisor只需要实现这些接口就可以driver的形式插入到OpenStack中去使用。</p><p><img src="https://s1.ax1x.com/2020/04/07/GgGbQ0.png" alt="GgGbQ0.png"></p><p>    在nova-compute的配置文件/etc/nova/nova.conf中，由compute-driver配置项指定该计算节点使用哪一种hypervisor的driver。</p><p><a href="https://imgchr.com/i/GgJapn" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/04/07/GgJapn.png" alt="GgJapn.png"></a></p><ul><li>关于messaging</li></ul><p>    在创建虚拟机的过程中，nova-*子服务之间的调用严重依赖messaging。这是因为它是采用了异步调用的方式。</p><ul><li>同步调用</li></ul><p>    API直接调用scheduler的接口就是直接调用，其特点是API发出请求后需要一直等待，直到scheduler完成对compute的调度，将结果返回给API后API才能够继续做后面的工作。</p><ul><li>异步调用</li></ul><p>    API通过messaging间接调用scheduler就是异步调用，其特点就是API发出请求后不需要等待，直接返回，继续做后面的事。scheduler从messaging接收到请求后执行调度，完成后将结果也通过messaging发送给API。</p><p>好处：</p><ul><li>解耦各子服务：子服务不需要知道其他服务运行在哪里，只需要发送消息给messaging就能完成调度</li><li>提高性能：无需等待返回结果，这样就可以执行更多的工作，提高系统的吞吐量。</li><li>提高伸缩性：子服务可以根据需要进行扩展，启动更多的实例处理更多的请求，在提高可用性的同时也提高了整个伸缩性。而且这种变化不会影响到其他子服务。</li></ul><h4 id="nova组件">nova组件</h4><ul><li>Nova-api service：负责对终端用户调用compute API的接收和反馈</li><li>Nova-api-metadata：负责接收虚拟机对metadata（元数据）访问请求，一般部署nova-network的多主机模式才会用nova-api-metadata。</li><li>Nova-compute：该服务通过hypervisor APIs（XenAPI、libvirt for KVM or QEMU、VMwareAPI）创建和终止虚拟机实例。该服务接收消息队列中的信息，执行一系列操作命令，如创建和更新虚拟机实例状态。</li><li>Nova-scheduler：该服务接收消息队列中的请求，从而决定虚拟机实例运行在哪个计算节点上。</li><li>Nova-conductor：nova-compute经常需要更新数据库，但是出于安全性和伸缩性的考虑，nova-compute不会直接访问数据库，而是交由nova-conductor去处理，并且这两个服务不能安装在同一个节点上。</li></ul><p>    我们可以通过nova service-list查看具体安装了哪些组件：</p><p><img src="https://s1.ax1x.com/2020/04/07/Gg0CqI.png" alt="Gg0CqI.png"></p><h4 id="请求流程">请求流程</h4><ul><li>客户或程序向api（nova-api）发送创建虚拟机的请求。</li><li>API对请求做一些必要的处理后，向message（rabbitMQ）发送了消息，让scheduler创建一个虚拟机</li><li>scheduler从messaging获取到API发送的请求后，执行调度算法，从若干节点中选出节点A。</li><li>scheduler向messaging发送消息，告知在A上创建这个虚拟机</li><li>计算节点A的compute（nova-compute）从messaging中获取到scheduler发给他的消息后，然后在本节点的hypervisor上启动虚拟机。</li></ul><p>    而对于其中nova-compute而言，它所做的事有这些：</p><p>     （1）为instance准备资源，根据指定的flavor依次为instance分配内存、磁盘和vCPU。<br>     （2）创建instance的镜像文件，它会先检查是否已经下载，如果没有，则会先向glance去下载相应的镜像文件到本地，然后通过qemu-img创建镜像。<br>     （3）创建实例的XML文件<br>     （4）创建虚拟网络以及启动实例</p><p>    在虚机创建的过程中，compute如果需要查询或者更新数据库信息，会通过messaging向conductor（nova-conductor）发送消息。</p><p><img src="https://s1.ax1x.com/2020/04/07/GgB5u9.png" alt="GgB5u9.png"></p><h4 id="调度方式">调度方式</h4><p>    在nova.conf中，nova通过schedulerdriver、scheduleravailable_filters和schedulerdefaultfilters这三个参数来配置nova-scheduler。</p><p>1、filter scheduler</p><p>    它是nova-scheduler默认的调度器，调度过程分为两步：</p><ul><li>通过过滤器（filter）选择满足条件的计算节点</li><li>通过权重计算选择在最优（权重值最大）的计算节点上创建instance。</li></ul><p><img src="https://s1.ax1x.com/2020/04/07/GgDCUP.png" alt="GgDCUP.png"></p><p>    它也允许使用第三方scheduler，配置好driver就行。也可以使用多个filter一次进行过滤，过滤之后的节点再通过计算权重选出最合适的节点。</p><p><img src="https://s1.ax1x.com/2020/04/07/GgDFC8.png" alt="GgDFC8.png"></p><ul><li>开始有6个计算节点</li><li>通过filter过滤，刷了两个</li><li>然后计算权重，权重高的host5入选</li></ul><p>2、filter</p><p>    当filterscheduler需要执行调度操作的时候，会让filter对计算节点进行判断，返回true或者false。</p><p>    Nova.conf中available_filters选项用于配置配置可用的filter：</p><p><a href="https://imgchr.com/i/GgDWIP" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/04/07/GgDWIP.png" alt="GgDWIP.png"></a></p><p>    另外还有一个选项用于指定scheduler真正使用的filter，默认值：</p><p><a href="https://imgchr.com/i/GgDvGT" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/04/07/GgDvGT.png" alt="GgDvGT.png"></a></p><p>    Filter scheduler将按照列表中的顺序依次过滤。</p><ul><li>Retryfilter</li></ul><p>    作用是刷掉之前已经调度过的节点。比如说A、B、C三个节点都通过了过滤，最终A因为权重最大被选中，但是由于某个原因，操作在A上失败了，默认情况下nova-scheduler会重新执行过滤操作（默认是3，max_attempts），那么这时候retryfilter就会将A直接刷掉，避免操作再次失败。</p><ul><li>Availabilityzonefilter</li></ul><p>    为提高容灾性和提供隔离服务，可以将计算节点划分到不同的availability zone中。OpenStack默认有一个命名为nova的availability zone，所有的计算节点初始都放在nova中。创建instance时，需要指定将instance部署到在哪个zone中。在做filter的时候，将不属于指定zone的计算节点过滤掉。</p><ul><li>Ramfilter</li></ul><p>    将不能满足flavor内存需求的计算节点过滤掉。需要注意的是：为了提高系统的资源使用率，OpenStack在计算节点可用内存是允许overcommit，也就是说可以超过实际内存的大小。超过的程度通过文件中参数来控制：</p><p><img src="https://s1.ax1x.com/2020/04/07/GgrBoq.png" alt="GgrBoq.png"></p><ul><li>Diskfilter</li></ul><p>    将不能满足flavor磁盘需求的计算节点过滤掉，和上面一样，允许overcommit。</p><p><a href="https://imgchr.com/i/GgroY6" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/04/07/GgroY6.png" alt="GgroY6.png"></a></p><ul><li>Corefilter</li></ul><p>    将不满足flavor vcpu需求的计算节点过滤掉。</p><p><img src="https://s1.ax1x.com/2020/04/07/GgsCp8.png" alt="GgsCp8.png"></p><ul><li>Computefilter</li></ul><p>    保证只有nova-compute服务正常工作的计算节点，才能够被调度。</p><ul><li>Computecapabiliesfilter</li></ul><p>    如果想将instance指定部署到x86_64架构的节点上，就可以利用它。</p><ul><li>Imagepropertiesfilter</li></ul><p>    根据所选image的属性来筛选匹配的计算节点。跟flavor类似，image也有metadata用于指定其属性</p><ul><li>Servergroupantiaffinityfilter</li></ul><p>    可以尽量将instance分散部署到不同的节点上。为保证分散部署，可以进行如下操作：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">• 创建一个anti-affinity策略的server group：</span><br><span class="line">Nova  server-group-create  --policy anti-affinity group-1</span><br><span class="line"></span><br><span class="line">• 依次创建instance，将instance放到group-1中：</span><br><span class="line">Nova boot --image IMAGEID --flavor 1 -hint group=group-1 ins1</span><br><span class="line">Nova boot --image IMAGEID --flavor 1 -hint group=group-1 ins2</span><br><span class="line">Nova boot --image IMAGEID --flavor 1 -hint group=group-1 ins3</span><br><span class="line"></span><br><span class="line">调度使会将ins1、2、3部署到不同的计算节点，创建instance的时候，如果没有指定server group,servergroupantiaffinityfilter会直接通过，不做任何过滤。</span><br></pre></td></tr></table></figure><ul><li>Servergroupaffinityfilter</li></ul><p>    与上面一个相反，它会尽量将instance部署到同一个计算节点上。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Nova  server-group-create  --policy affinity group-1</span><br><span class="line">Nova boot --image IMAGEID --flavor 1 -hint group=group-1 ins1</span><br><span class="line">Nova boot --image IMAGEID --flavor 1 -hint group=group-1 ins2</span><br><span class="line">Nova boot --image IMAGEID --flavor 1 -hint group=group-1 ins3</span><br></pre></td></tr></table></figure><p>3、weight</p><p>    经过过滤，scheduler选出能够部署instance的计算节点，nova-scheduler会通过计算节点空闲的内存量计算权重值：空闲内存越多，权重越大。</p>]]></content:encoded>
      
      <comments>https://Chainyinghao.github.io/2020/04/07/openstack-3/#disqus_thread</comments>
    </item>
    
    <item>
      <title>openstack（三）</title>
      <link>https://Chainyinghao.github.io/2020/04/07/openstack-2/</link>
      <guid>https://Chainyinghao.github.io/2020/04/07/openstack-2/</guid>
      <pubDate>Tue, 07 Apr 2020 05:34:06 GMT</pubDate>
      <description>
      
        
        
          &lt;h3 id=&quot;kolla-ansible部署（all-in-one）&quot;&gt;kolla-ansible部署（all-in-one）&lt;/h3&gt;
&lt;ul&gt;
&lt;li&gt;环境&lt;/li&gt;
&lt;/ul&gt;

        
      
      </description>
      
      <content:encoded><![CDATA[<h3 id="kolla-ansible部署（all-in-one）">kolla-ansible部署（all-in-one）</h3><ul><li>环境</li></ul>]]></content:encoded>
      
      <comments>https://Chainyinghao.github.io/2020/04/07/openstack-2/#disqus_thread</comments>
    </item>
    
    <item>
      <title>openstack(二)</title>
      <link>https://Chainyinghao.github.io/2020/03/09/openstack-1/</link>
      <guid>https://Chainyinghao.github.io/2020/03/09/openstack-1/</guid>
      <pubDate>Mon, 09 Mar 2020 09:40:28 GMT</pubDate>
      <description>
      
        
        
          &lt;h3 id=&quot;安装（queen版，下一篇讲用kolla-ansible来安装）&quot;&gt;安装（queen版，下一篇讲用kolla-ansible来安装）&lt;/h3&gt;
&lt;h4 id=&quot;环境&quot;&gt;环境&lt;/h4&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;
        
      
      </description>
      
      <content:encoded><![CDATA[<h3 id="安装（queen版，下一篇讲用kolla-ansible来安装）">安装（queen版，下一篇讲用kolla-ansible来安装）</h3><h4 id="环境">环境</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">192.168.40.150 computer01    centos7   4.4.197</span><br><span class="line">192.168.40.151 controller</span><br><span class="line">192.168.40.152 cinder</span><br></pre></td></tr></table></figure><p>1、配置主机名的映射(在/etc/hosts文件中添加相应的主机和ip映射)</p><p>2、配置时间同步，控制节点为ntp server</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">所有节点：yum install chrony -y</span><br><span class="line">controller：</span><br><span class="line">vim /etc/chrony.conf</span><br><span class="line">    allow 192.168.0.0/16</span><br><span class="line">systemctl restart chronyd</span><br><span class="line"></span><br><span class="line">Computer01和cinder：</span><br><span class="line">vim /etc/chrony.conf</span><br><span class="line">    server controller iburst</span><br><span class="line"></span><br><span class="line">注释其他几行</span><br></pre></td></tr></table></figure><p>测试：<br>在controller节点上：</p><p><img src="https://s1.ax1x.com/2020/03/15/88trsP.png" alt="88trsP.png"></p><p>其他节点上：</p><p><img src="https://s1.ax1x.com/2020/03/15/88tHdU.png" alt="88tHdU.png"></p><p>3、安装OpenStack包（所有节点）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">yum install centos-release-openstack-queens -y</span><br><span class="line">yum upgrade</span><br><span class="line">yum install python-openstackclient -y</span><br><span class="line">yum install openstack-selinux -y</span><br></pre></td></tr></table></figure><p>4、安装数据库（controller）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">yum install mariadb mariadb-server python2-PyMySQL -y</span><br><span class="line"></span><br><span class="line">vim /etc/my.cnf.d/mariadb-server.cnf </span><br><span class="line"></span><br><span class="line">datadir=/var/lib/mysql</span><br><span class="line">socket=/var/lib/mysql/mysql.sock</span><br><span class="line">log-error=/var/log/mariadb/mariadb.log</span><br><span class="line">pid-file=/var/run/mariadb/mariadb.pid</span><br><span class="line">default-storage-engine=Innodb</span><br><span class="line">bind-address=192.168.40.151        //controller的IP</span><br><span class="line">innodb_file_per_table=on</span><br><span class="line">max_connections=4096</span><br><span class="line">init-connect=&apos;SET NAMES utf8&apos;</span><br><span class="line">character-set-server=utf8</span><br><span class="line"></span><br><span class="line">mysql_secure_installation</span><br></pre></td></tr></table></figure><p>5、安装rabbitMQ（controller）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">yum install rabbitmq-server -y</span><br><span class="line">systemctl enable rabbitmq-server.service</span><br><span class="line">systemctl start rabbitmq-server.service</span><br><span class="line"></span><br><span class="line">添加用户并设置权限：</span><br><span class="line">rabbitmqctl add_user openstack 12345</span><br><span class="line">rabbitmqctl set_permissions -p / openstack &quot;.*&quot; &quot;.*&quot; &quot;.*&quot;</span><br></pre></td></tr></table></figure><p>6、安装数据库缓存（controller）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">yum install memcached python-memcached -y</span><br><span class="line">编辑/etc/sysconfig/memcached</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2020/03/15/88dPoT.png" alt="88dPoT.png"></p><p>注：（options，后面不加controller）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl enable memcached.service</span><br><span class="line">systemctl start memcached.service</span><br></pre></td></tr></table></figure><p>7、安装etcd（controller）</p><p><a href="https://imgchr.com/i/88BY6J" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/03/15/88BY6J.png" alt="88BY6J.png"></a></p><p>8、安装keystone（controller）</p><ul><li>创建keystone数据库并授权</li></ul><p><img src="https://s1.ax1x.com/2020/03/15/88DsU0.png" alt="88DsU0.png"></p><ul><li>安装、配置</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install openstack-keystone httpd mod_wsgi -y</span><br></pre></td></tr></table></figure><p>编辑 /etc/keystone/keystone.conf 文件：<br><img src="https://s1.ax1x.com/2020/03/15/88yLxU.png" alt="88yLxU.png"></p><ul><li>同步keystone数据库</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/bin/sh -c &quot;keystone-manage db_sync&quot; keystone</span><br></pre></td></tr></table></figure><ul><li>数据库初始化</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">keystone-manage fernet_setup --keystone-user keystone --keystone-group keystone</span><br><span class="line">keystone-manage credential_setup --keystone-user keystone --keystone-group keystone</span><br></pre></td></tr></table></figure><ul><li>引导身份认证</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">keystone-manage bootstrap --bootstrap-password 123456 --bootstrap-admin-url http://controller:35357/v3/ --bootstrap-internal-url http://controller:5000/v3/ --bootstrap-public-url http://controller:5000/v3/ --bootstrap-region-id RegionOne</span><br></pre></td></tr></table></figure><p>9、配置http服务</p><ul><li>编辑 /etc/httpd/conf/httpd.conf 文件，配置 ServerName 参数</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ServerName controller</span><br></pre></td></tr></table></figure><ul><li>/usr/share/keystone/wsgi-keystone.conf 链接文件</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ln -s /usr/share/keystone/wsgi-keystone.conf /etc/httpd/conf.d/</span><br></pre></td></tr></table></figure><ul><li>启动（如果报错，可关闭selinux）</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl enable httpd.service</span><br><span class="line">systemctl start httpd.service</span><br></pre></td></tr></table></figure><ul><li>配置administrator账号</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">export OS_USERNAME=admin</span><br><span class="line">export OS_PASSWORD=123456</span><br><span class="line">export OS_PROJECT_NAME=admin</span><br><span class="line">export OS_USER_DOMAIN_NAME=Default</span><br><span class="line">export OS_PROJECT_DOMAIN_NAME=Default</span><br><span class="line">export OS_AUTH_URL=http://controller:35357/v3</span><br><span class="line">export OS_IDENTITY_API_VERSION=3</span><br></pre></td></tr></table></figure><p>10、创建domain，projects，users，roles</p><ul><li>创建域：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openstack domain create --description &quot;Domain&quot; example</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2020/03/15/886OYt.png" alt="886OYt.png"></p><ul><li>创建服务项目</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openstack project create --domain default   --description &quot;Service Project&quot; service</span><br></pre></td></tr></table></figure><p><a href="https://imgchr.com/i/88cUne" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/03/15/88cUne.png" alt="88cUne.png"></a></p><ul><li>创建平台demo项目</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openstack project create --domain default --description &quot;Demo Project&quot; demo</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2020/03/15/88gVUA.png" alt="88gVUA.png"></p><ul><li>创建demo用户</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openstack user create --domain default  --password-prompt demo</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2020/03/15/882Yee.png" alt="882Yee.png"></p><ul><li>创建用户角色</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openstack role create user</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2020/03/15/882Xf1.png" alt="882Xf1.png"></p><ul><li>添加用户角色到demo项目和用户</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openstack role add --project demo --user demo user</span><br></pre></td></tr></table></figure><p>11、检查配置</p><ul><li>取消环境变量</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">unset OS_AUTH_URL OS_PASSWORD</span><br></pre></td></tr></table></figure><ul><li>使用admin申请token</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openstack --os-auth-url http://controller:35357/v3 --os-project-domain-name Default --os-user-domain-name Default --os-project-name admin --os-username admin token issue</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2020/03/16/8GUMLt.png" alt="8GUMLt.png"></p><ul><li>使用demo申请token</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openstack --os-auth-url http://controller:5000/v3 --os-project-domain-name Default --os-user-domain-name Default --os-project-name demo --os-username demo token issue</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2020/03/16/8GUWO1.png" alt="8GUWO1.png"></p><ul><li>通过脚本来生成token，为了提高可操作性和工作效率，可以创建一个统一而完整的openRC文件，其包括通用变量和特殊变量</li></ul><p><img src="https://s1.ax1x.com/2020/03/16/8GU7fe.png" alt="8GU7fe.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">source admin-openrc</span><br><span class="line">openstack token issue</span><br></pre></td></tr></table></figure><p>12、安装glance服务（controller）</p><ul><li>创建glance数据库，并授权</li></ul><p><img src="https://s1.ax1x.com/2020/03/16/8GakXn.png" alt="8GakXn.png"></p><ul><li>获取admin用户的环境变量，并创建服务认证</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">source admin-openrc</span><br><span class="line">openstack user create --domain default --password-prompt glance</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2020/03/16/8GaQ1J.png" alt="8GaQ1J.png"></p><ul><li>将admin添加到glance的项目和用户中</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openstack role add --project service --user glance admin</span><br></pre></td></tr></table></figure><ul><li>创建glance项目</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openstack service create --name glance  --description &quot;OpenStack Image&quot; image</span><br></pre></td></tr></table></figure><ul><li>创建glance镜像服务的API端点</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openstack endpoint create --region RegionOne image public http://controller:9292</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2020/03/16/8GaG0x.png" alt="8GaG0x.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openstack endpoint create --region RegionOne image internal http://controller:9292</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2020/03/16/8Gaw1H.png" alt="8Gaw1H.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openstack endpoint create --region RegionOne image admin http://controller:9292</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2020/03/16/8GaoBq.png" alt="8GaoBq.png"></p><p>13、安装和配置glance组件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">yum install openstack-glance -y</span><br><span class="line">编辑 /etc/glance/glance-api.conf 文件：</span><br><span class="line">[database]      //配置数据库连接</span><br><span class="line">connection = mysql+pymysql://glance:123456@controller/glance</span><br><span class="line"></span><br><span class="line">[keystone_authtoken]        //和[paste_deploy]一起，配置keystone身份认证服务组件访问</span><br><span class="line">auth_uri = http://controller:5000</span><br><span class="line">auth_url = http://controller:35357</span><br><span class="line">memcached_servers = controller:11211</span><br><span class="line">auth_type = password</span><br><span class="line">project_domain_name = default</span><br><span class="line">user_domain_name = default</span><br><span class="line">project_name = service</span><br><span class="line">username = glance</span><br><span class="line">password = 123456</span><br><span class="line"></span><br><span class="line">[paste_deploy]</span><br><span class="line">flavor = keystone</span><br><span class="line"></span><br><span class="line">[glance_store]    //配置虚拟机的存储路径和存储方式</span><br><span class="line">stores = file,http</span><br><span class="line">default_store = file</span><br><span class="line">filesystem_store_datadir = /var/lib/glance/images/</span><br><span class="line"></span><br><span class="line">编辑 /etc/glance/glance-registry.conf 文件：</span><br><span class="line">[database]</span><br><span class="line">connection = mysql+pymysql://glance:123456@controller/glance</span><br><span class="line"></span><br><span class="line">[keystone_authtoken]</span><br><span class="line">auth_uri = http://controller:5000</span><br><span class="line">auth_url = http://controller:5000</span><br><span class="line">memcached_servers = controller:11211</span><br><span class="line">auth_type = password</span><br><span class="line">project_domain_name = default</span><br><span class="line">user_domain_name = default</span><br><span class="line">project_name = service</span><br><span class="line">username = glance</span><br><span class="line">password = 123456</span><br><span class="line"></span><br><span class="line">[paste_deploy]</span><br><span class="line">flavor = keystone</span><br><span class="line"></span><br><span class="line">同步镜像服务数据库：</span><br><span class="line">/bin/sh -c &quot;glance-manage db_sync&quot; glance</span><br><span class="line"></span><br><span class="line">启动：</span><br><span class="line">systemctl enable openstack-glance-api.service openstack-glance-registry.service</span><br><span class="line">systemctl start openstack-glance-api.service openstack-glance-registry.service</span><br></pre></td></tr></table></figure><p>14、验证：</p><ul><li>获取admin用户的环境变量，且下载镜像：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">source admin-openrc</span><br><span class="line">wget http://download.cirros-cloud.net/0.3.5/cirros-0.3.5-x86_64-disk.img</span><br><span class="line"></span><br><span class="line">上传镜像（如果没有9292端口报错，可能是日志权限问题）：</span><br><span class="line">openstack image create &quot;cirros&quot; --file cirros-0.3.5-x86_64-disk.img --disk-format qcow2 --container-format bare --public</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2020/03/16/8GwNSe.png" alt="8GwNSe.png"></p><p>查看：</p><p><img src="https://s1.ax1x.com/2020/03/16/8YhudK.png" alt="8YhudK.png"></p><p>15、安装配置computer（controller）</p><ul><li>创建nova_api，nova，nova_cell0数据库</li></ul><p><img src="https://s1.ax1x.com/2020/03/16/8YhlJe.png" alt="8YhlJe.png"></p><ul><li>创建nova用户</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">source admin-openrc</span><br><span class="line">openstack user create --domain default --password-prompt nova</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2020/03/16/8Yh0Jg.png" alt="8Yh0Jg.png"></p><ul><li>添加admin角色赋给项目和用户</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openstack role add --project service --user nova admin</span><br></pre></td></tr></table></figure><ul><li>创建nova计算服务</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openstack service create --name nova --description &quot;OpenStack Compute&quot; compute</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2020/03/16/8YhhYF.png" alt="8YhhYF.png"></p><ul><li>创建API服务端点</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openstack endpoint create --region RegionOne compute public http://controller:8774/v2.1</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2020/03/16/8Y4EtS.png" alt="8Y4EtS.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openstack endpoint create --region RegionOne compute internal http://controller:8774/v2.1</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2020/03/16/8Y4DAK.png" alt="8Y4DAK.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openstack endpoint create --region RegionOne compute admin http://controller:8774/v2.1</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2020/03/16/8Y4o4S.png" alt="8Y4o4S.png"></p><ul><li>创建placement服务用户</li></ul><p><img src="https://s1.ax1x.com/2020/03/16/8Y4H3Q.png" alt="8Y4H3Q.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openstack service create --name placement --description &quot;Placement API&quot; placement</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2020/03/16/8Y59CF.png" alt="8Y59CF.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">openstack endpoint create --region RegionOne placement public http://controller:8778</span><br><span class="line">openstack endpoint create --region RegionOne placement internal http://controller:8778</span><br><span class="line">openstack endpoint create --region RegionOne placement admin http://controller:8778</span><br></pre></td></tr></table></figure><p>16、安装和配置nova组件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br></pre></td><td class="code"><pre><span class="line">yum install openstack-nova-api openstack-nova-conductor openstack-nova-console openstack-nova-novncproxy openstack-nova-scheduler openstack-nova-placement-api</span><br><span class="line"></span><br><span class="line">编辑 /etc/nova/nova.conf 文件：</span><br><span class="line">[DEFAULT]</span><br><span class="line">enabled_apis = osapi_compute,metadata</span><br><span class="line">transport_url = rabbit://openstack:123456@controller</span><br><span class="line">my_ip = 192.168.40.151</span><br><span class="line">use_neutron = True</span><br><span class="line">firewall_driver = nova.virt.firewall.NoopFirewallDriver</span><br><span class="line"></span><br><span class="line">[api_database]</span><br><span class="line">connection = mysql+pymysql://nova:123456@controller/nova_api</span><br><span class="line"></span><br><span class="line">[database]</span><br><span class="line">connection = mysql+pymysql://nova:123456@controller/nova</span><br><span class="line"></span><br><span class="line">[api]</span><br><span class="line">auth_strategy = keystone</span><br><span class="line"></span><br><span class="line">[keystone_authtoken]</span><br><span class="line">auth_url = http://controller:5000/v3 </span><br><span class="line">memcached_servers = controller:11211</span><br><span class="line">auth_type = password</span><br><span class="line">project_domain_name = default</span><br><span class="line">user_domain_name = default</span><br><span class="line">project_name = service</span><br><span class="line">username = nova</span><br><span class="line">password = 123456</span><br><span class="line"></span><br><span class="line">[vnc]</span><br><span class="line">enabled = true</span><br><span class="line">server_listen = $my_ip</span><br><span class="line">server_proxyclient_address = $my_ip</span><br><span class="line"></span><br><span class="line">[glance]</span><br><span class="line">api_servers = http://controller:9292</span><br><span class="line"></span><br><span class="line">[oslo_concurrency]</span><br><span class="line">lock_path = /var/lib/nova/tmp</span><br><span class="line"></span><br><span class="line">[placement]</span><br><span class="line">os_region_name = RegionOne</span><br><span class="line">project_domain_name = Default</span><br><span class="line">project_name = service</span><br><span class="line">auth_type = password</span><br><span class="line">user_domain_name = Default</span><br><span class="line">auth_url = http://controller:5000/v3</span><br><span class="line">username = placement</span><br><span class="line">password = 123456</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">由于软件包的一个bug，需要在/etc/httpd/conf.d/00-nova-placement-api.conf 文件中添加如下配置：</span><br><span class="line">&lt;Directory /usr/bin&gt;</span><br><span class="line">   &lt;IfVersion &gt;= 2.4&gt;</span><br><span class="line">      Require all granted</span><br><span class="line">   &lt;/IfVersion&gt;</span><br><span class="line">   &lt;IfVersion &lt; 2.4&gt;</span><br><span class="line">      Order allow,deny</span><br><span class="line">      Allow from all</span><br><span class="line">   &lt;/IfVersion&gt;</span><br><span class="line">&lt;/Directory&gt;</span><br><span class="line"></span><br><span class="line">重启httpd</span><br><span class="line"></span><br><span class="line">同步nova-api数据库：</span><br><span class="line">/bin/sh -c &quot;nova-manage api_db sync&quot; nova </span><br><span class="line"></span><br><span class="line">注册cell0数据库：</span><br><span class="line">/bin/sh -c &quot;nova-manage cell_v2 map_cell0&quot; nova</span><br><span class="line"></span><br><span class="line">创建cell1：</span><br><span class="line">/bin/sh -c &quot;nova-manage cell_v2 create_cell --name=cell1 --verbose&quot; nova</span><br><span class="line"></span><br><span class="line">同步nova数据库：</span><br><span class="line">/bin/sh -c &quot;nova-manage db sync&quot; nova</span><br></pre></td></tr></table></figure><p>验证：<br><img src="https://s1.ax1x.com/2020/03/16/8Y5MgH.png" alt="8Y5MgH.png"></p><p>重启：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">systemctl enable openstack-nova-api.service openstack-nova-consoleauth.service openstack-nova-scheduler.service openstack-nova-conductor.service openstack-nova-novncproxy.service</span><br><span class="line">systemctl restart openstack-nova-api.service openstack-nova-consoleauth.service openstack-nova-scheduler.service openstack-nova-conductor.service openstack-nova-novncproxy.service</span><br></pre></td></tr></table></figure><p>17、安装配置compute（computer节点）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">yum install openstack-nova-compute</span><br><span class="line">编辑 /etc/nova/nova.conf 文件：</span><br><span class="line">[DEFAULT]</span><br><span class="line">enabled_apis = osapi_compute,metadata</span><br><span class="line">transport_url = rabbit://openstack:123456@controller</span><br><span class="line">my_ip = 192.168.40.150    //计算节点的网络管理IP地址</span><br><span class="line">use_neutron = True</span><br><span class="line">firewall_driver = nova.virt.firewall.NoopFirewallDriver</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">[api]</span><br><span class="line">auth_strategy = keystone</span><br><span class="line"></span><br><span class="line">[keystone_authtoken]</span><br><span class="line">auth_url = http://controller:5000/v3</span><br><span class="line">memcached_servers = controller:11211</span><br><span class="line">auth_type = password</span><br><span class="line">project_domain_name = default</span><br><span class="line">user_domain_name = default</span><br><span class="line">project_name = service</span><br><span class="line">username = nova</span><br><span class="line">password = 123456</span><br><span class="line"></span><br><span class="line">[vnc]</span><br><span class="line">enabled = True</span><br><span class="line">server_listen = 0.0.0.0</span><br><span class="line">server_proxyclient_address = $my_ip</span><br><span class="line">novncproxy_base_url = http://controller:6080/vnc_auto.html</span><br><span class="line"></span><br><span class="line">[glance]</span><br><span class="line">api_servers = http://controller:9292</span><br><span class="line"></span><br><span class="line">[oslo_concurrency]</span><br><span class="line">lock_path = /var/lib/nova/tmp</span><br><span class="line"></span><br><span class="line">[placement]</span><br><span class="line">os_region_name = RegionOne</span><br><span class="line">project_domain_name = Default</span><br><span class="line">project_name = service</span><br><span class="line">auth_type = password</span><br><span class="line">user_domain_name = Default</span><br><span class="line">auth_url = http://controller:35357/v3</span><br><span class="line">username = placement</span><br><span class="line">password = 123456</span><br><span class="line"></span><br><span class="line">[libvirt]</span><br><span class="line">virt_type=kvm</span><br><span class="line"></span><br><span class="line">启动：</span><br><span class="line">systemctl enable openstack-nova-compute</span><br><span class="line">systemctl enable libvirtd.service</span><br><span class="line">systemctl start libvirtd.service</span><br><span class="line">systemctl restart openstack-nova-compute.service</span><br></pre></td></tr></table></figure><ul><li>确认nova计算服务组件已经成功运行和注册：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">controller：</span><br><span class="line">source admin-openrc</span><br><span class="line">openstack compute service list --service nova-compute</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2020/03/16/8YIAzQ.png" alt="8YIAzQ.png"></p><ul><li>发现计算节点：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/bin/sh -c &quot;nova-manage cell_v2 discover_hosts --verbose&quot; nova</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2020/03/16/8YIKoV.png" alt="8YIKoV.png"></p><p>18、在controller上验证计算服务操作</p><ul><li>列出服务组件</li></ul><p><img src="https://s1.ax1x.com/2020/03/16/8YIUdx.png" alt="8YIUdx.png"></p><ul><li>列出身份服务中的API端点与身份服务的连接</li></ul><p><img src="https://s1.ax1x.com/2020/03/16/8YIgeI.png" alt="8YIgeI.png"></p><ul><li>列出镜像</li></ul><p><img src="https://s1.ax1x.com/2020/03/16/8YITyj.png" alt="8YITyj.png"></p><ul><li>检查cells和placement API</li></ul><p><img src="https://s1.ax1x.com/2020/03/16/8YIvfU.png" alt="8YIvfU.png"></p><p>19、安装和配置网络组件（controller）</p><ul><li>创建数据库以及授权</li></ul><p><img src="https://s1.ax1x.com/2020/03/16/8YoGh8.png" alt="8YoGh8.png"></p><ul><li>创建用户以及服务</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openstack user create --domain default --password-prompt neutron</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2020/03/16/8YorNV.png" alt="8YorNV.png"></p><ul><li>将admin赋给neutron和service</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openstack role add --project service --user neutron admin</span><br></pre></td></tr></table></figure><ul><li>创建service entity</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openstack service create --name neutron --description &quot;OpenStack Networking&quot; network</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2020/03/16/8Yo2jJ.png" alt="8Yo2jJ.png"></p><ul><li>创建网络服务API 端点</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openstack endpoint create --region RegionOne network public http://controller:9696</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2020/03/16/8YohH1.png" alt="8YohH1.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openstack endpoint create --region RegionOne network internal http://controller:9696</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2020/03/16/8YoH3D.png" alt="8YoH3D.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openstack endpoint create --region RegionOne network admin http://controller:9696</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2020/03/16/8YTADs.png" alt="8YTADs.png"></p><p>20、配置网络部分（controller）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">yum install openstack-neutron openstack-neutron-ml2 openstack-neutron-linuxbridge ebtables</span><br><span class="line">配置服务组件，编辑 /etc/neutron/neutron.conf 文件：</span><br><span class="line">[DEFAULT]</span><br><span class="line">auth_strategy = keystone</span><br><span class="line">core_plugin = ml2</span><br><span class="line">service_plugins =</span><br><span class="line">transport_url = rabbit://openstack:123456@controller</span><br><span class="line">notify_nova_on_port_status_changes = true</span><br><span class="line">notify_nova_on_port_data_changes = true</span><br><span class="line"></span><br><span class="line">[database]</span><br><span class="line">connection = mysql+pymysql://neutron:123456@controller/neutron</span><br><span class="line"></span><br><span class="line">[keystone_authtoken]</span><br><span class="line">auth_uri = http://controller:5000</span><br><span class="line">auth_url = http://controller:35357</span><br><span class="line">memcached_servers = controller:11211</span><br><span class="line">auth_type = password</span><br><span class="line">project_domain_name = default</span><br><span class="line">user_domain_name = default</span><br><span class="line">project_name = service</span><br><span class="line">username = neutron</span><br><span class="line">password = 123456</span><br><span class="line"></span><br><span class="line">[nova]</span><br><span class="line">auth_url = http://controller:35357</span><br><span class="line">auth_type = password</span><br><span class="line">project_domain_name = default</span><br><span class="line">user_domain_name = default</span><br><span class="line">region_name = RegionOne</span><br><span class="line">project_name = service</span><br><span class="line">username = nova</span><br><span class="line">password = 123456:</span><br><span class="line"></span><br><span class="line">[oslo_concurrency]</span><br><span class="line">lock_path = /var/lib/neutron/tmp</span><br></pre></td></tr></table></figure><p>21、配置网络二层插件（controller）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">编辑 /etc/neutron/plugins/ml2/ml2_conf.ini 文件：</span><br><span class="line">[ml2]</span><br><span class="line">type_drivers = flat,vlan</span><br><span class="line">tenant_network_types =</span><br><span class="line">mechanism_drivers = linuxbridge</span><br><span class="line">extension_drivers = port_security</span><br><span class="line"></span><br><span class="line">[ml2_type_flat]</span><br><span class="line">flat_networks = provider</span><br><span class="line"></span><br><span class="line">[securitygroup]</span><br><span class="line">enable_ipset = true</span><br><span class="line"></span><br><span class="line">配置 Linux 网桥，编辑 /etc/neutron/plugins/ml2/linuxbridge_agent.ini 文件：</span><br><span class="line">[linux_bridge]</span><br><span class="line">physical_interface_mappings = provider:ens33</span><br><span class="line"></span><br><span class="line">[vxlan]</span><br><span class="line">enable_vxlan = false</span><br><span class="line"></span><br><span class="line">[securitygroup]</span><br><span class="line">enable_security_group = true</span><br><span class="line">firewall_driver = neutron.agent.linux.iptables_firewall.IptablesFirewallDriver</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2020/03/16/8YTcIP.png" alt="8YTcIP.png"></p><p>将其设置为1</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">配置 DHCP 服务编辑 /etc/neutron/dhcp_agent.ini 文件:</span><br><span class="line">[DEFAULT]</span><br><span class="line">interface_driver = linuxbridge</span><br><span class="line">dhcp_driver = neutron.agent.linux.dhcp.Dnsmasq</span><br><span class="line">enable_isolated_metadata = true</span><br><span class="line"></span><br><span class="line">配置 metadata，编辑 /etc/neutron/metadata_agent.ini 文件:</span><br><span class="line">[DEFAULT]</span><br><span class="line">nova_metadata_host = controller</span><br><span class="line">metadata_proxy_shared_secret = 123456</span><br><span class="line"></span><br><span class="line">配置计算服务使用网络服务，编辑 /etc/nova/nova.conf 文件:</span><br><span class="line">[neutron]</span><br><span class="line">url = http://controller:9696</span><br><span class="line">auth_url = http://controller:35357</span><br><span class="line">auth_type = password</span><br><span class="line">project_domain_name = default</span><br><span class="line">user_domain_name = default</span><br><span class="line">region_name = RegionOne</span><br><span class="line">project_name = service</span><br><span class="line">username = neutron</span><br><span class="line">password = 123456</span><br><span class="line">service_metadata_proxy = true</span><br><span class="line">metadata_proxy_shared_secret = 123456</span><br><span class="line"></span><br><span class="line">创建服务软链接:</span><br><span class="line">ln -s /etc/neutron/plugins/ml2/ml2_conf.ini /etc/neutron/plugin.ini</span><br><span class="line"></span><br><span class="line">同步数据库:</span><br><span class="line">/bin/sh -c &quot;neutron-db-manage --config-file /etc/neutron/neutron.conf --config-file /etc/neutron/plugins/ml2/ml2_conf.ini upgrade head&quot; neutron</span><br><span class="line"></span><br><span class="line">重启 compute API 服务:</span><br><span class="line">systemctl restart openstack-nova-api.service</span><br><span class="line"></span><br><span class="line">配置网络服务开机启动:</span><br><span class="line">systemctl enable neutron-server.service neutron-linuxbridge-agent.service neutron-dhcp-agent.service neutron-metadata-agent.service</span><br><span class="line">systemctl start neutron-server.service neutron-linuxbridge-agent.service neutron-dhcp-agent.service neutron-metadata-agent.service</span><br></pre></td></tr></table></figure><p>22、配置compute节点网络服务</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">yum install openstack-neutron-linuxbridge ebtables ipset</span><br><span class="line"></span><br><span class="line">配置公共组件，编辑 /etc/neutron/neutron.conf 文件：</span><br><span class="line">[DEFAULT]</span><br><span class="line">auth_strategy = keystone</span><br><span class="line">transport_url = rabbit://openstack:123456@controller</span><br><span class="line"></span><br><span class="line">[keystone_authtoken]</span><br><span class="line">auth_uri = http://controller:5000</span><br><span class="line">auth_url = http://controller:35357</span><br><span class="line">memcached_servers = controller:11211</span><br><span class="line">auth_type = password</span><br><span class="line">project_domain_name = default</span><br><span class="line">user_domain_name = default</span><br><span class="line">project_name = service</span><br><span class="line">username = neutron</span><br><span class="line">password = 123456</span><br><span class="line"></span><br><span class="line">[oslo_concurrency]</span><br><span class="line">lock_path = /var/lib/neutron/tmp</span><br><span class="line"></span><br><span class="line">配置 Linux 网桥，编辑 /etc/neutron/plugins/ml2/linuxbridge_agent.ini 文件：</span><br><span class="line">[linux_bridge]</span><br><span class="line">physical_interface_mappings = provider:ens33</span><br><span class="line"></span><br><span class="line">[vxlan]</span><br><span class="line">enable_vxlan = false</span><br><span class="line"></span><br><span class="line">[securitygroup]</span><br><span class="line">enable_security_group = true</span><br><span class="line">firewall_driver = neutron.agent.linux.iptables_firewall.IptablesFirewallDriver</span><br><span class="line"></span><br><span class="line">配置计算节点网络服务，编辑 /etc/nova/nova.conf 文件：</span><br><span class="line">[neutron]</span><br><span class="line">url = http://controller:9696</span><br><span class="line">auth_url = http://controller:35357</span><br><span class="line">auth_type = password</span><br><span class="line">project_domain_name = default</span><br><span class="line">user_domain_name = default</span><br><span class="line">region_name = RegionOne</span><br><span class="line">project_name = service</span><br><span class="line">username = neutron</span><br><span class="line">password = 123456</span><br><span class="line"></span><br><span class="line">重启 compute 服务：</span><br><span class="line">systemctl restart openstack-nova-compute.service</span><br><span class="line"></span><br><span class="line">设置网桥服务开机启动：</span><br><span class="line">systemctl enable neutron-linuxbridge-agent.service</span><br><span class="line">systemctl start neutron-linuxbridge-agent.service</span><br></pre></td></tr></table></figure><p>23、安装horizon组件（controller）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line">yum install openstack-dashboard -y</span><br><span class="line"></span><br><span class="line">编辑 /etc/openstack-dashboard/local_settings 文件：</span><br><span class="line">OPENSTACK_HOST = &quot;controller&quot;</span><br><span class="line">ALLOWED_HOSTS = [&apos;*&apos;]</span><br><span class="line"></span><br><span class="line">###配置 memcache 会话存储###</span><br><span class="line">SESSION_ENGINE = &apos;django.contrib.sessions.backends.cache&apos;</span><br><span class="line"></span><br><span class="line">CACHES = &#123;</span><br><span class="line">    &apos;default&apos;: &#123;</span><br><span class="line">        &apos;BACKEND&apos;: &apos;django.core.cache.backends.memcached.MemcachedCache&apos;,</span><br><span class="line">        &apos;LOCATION&apos;: &apos;controller:11211&apos;,</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">###开启身份认证 API 版本 v3###</span><br><span class="line">OPENSTACK_KEYSTONE_URL = &quot;http://%s:5000/v3&quot; % OPENSTACK_HOST</span><br><span class="line"></span><br><span class="line">###开启 domains 版本支持###</span><br><span class="line">OPENSTACK_KEYSTONE_MULTIDOMAIN_SUPPORT = True</span><br><span class="line"></span><br><span class="line">###配置 API 版本####</span><br><span class="line">OPENSTACK_API_VERSIONS = &#123;</span><br><span class="line">    &quot;identity&quot;: 3,</span><br><span class="line">    &quot;image&quot;: 2,</span><br><span class="line">    &quot;volume&quot;: 2,</span><br><span class="line">&#125;</span><br><span class="line">OPENSTACK_KEYSTONE_DEFAULT_DOMAIN = &apos;Default&apos;</span><br><span class="line"></span><br><span class="line">OPENSTACK_NEUTRON_NETWORK = &#123;</span><br><span class="line">    &apos;enable_router&apos;: False,</span><br><span class="line">    &apos;enable_quotas&apos;: False,</span><br><span class="line">    &apos;enable_distributed_router&apos;: False,</span><br><span class="line">    &apos;enable_ha_router&apos;: False,</span><br><span class="line">    &apos;enable_lb&apos;: False,</span><br><span class="line">    &apos;enable_firewall&apos;: False,</span><br><span class="line">    &apos;enable_***&apos;: False,</span><br><span class="line">    &apos;enable_fip_topology_check&apos;: False,</span><br><span class="line">#修改时，注意底部采用原有的“&#125;”，重复会无法重启 web 服务</span><br><span class="line"></span><br><span class="line">TIME_ZONE = &quot;Asia/Shanghai&quot;</span><br><span class="line">重启 web 服务和会话存储:</span><br><span class="line">systemctl restart httpd.service memcached.service</span><br></pre></td></tr></table></figure><ul><li>前端访问：<br>访问 <a href="http://192.168.40151/dashborad" target="_blank" rel="noopener">http://192.168.40151/dashborad</a> 查看 openstack 的 web 页面：</li></ul><p><img src="https://s1.ax1x.com/2020/03/16/8Y7Uwn.png" alt="8Y7Uwn.png"></p><p>如果报错：</p><p><img src="https://s1.ax1x.com/2020/03/16/8Y7ISO.png" alt="8Y7ISO.png"></p><p><img src="https://s1.ax1x.com/2020/03/16/8YHp6g.png" alt="8YHp6g.png"></p><p>在WSGISocketPrefix run/wsgi 下添加：<br>**WSGIApplicationGroup %{GLOBAL}**然后重启</p><p><img src="https://s1.ax1x.com/2020/03/16/8YbS4x.png" alt="8YbS4x.png"></p><p>24、安装、配置cinder</p><ul><li>在controller节点上，配置数据库，创建cinder数据库、和前面一样，创建授权用户</li><li>加载admin-user环境变量，并创建identity服务凭据（123456）：</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">source admin-openrc </span><br><span class="line">openstack user create --domain default --password-prompt cinder</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2020/04/07/G6zEJP.png" alt="G6zEJP.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">将admin role赋予cinder用户和service project</span><br><span class="line">openstack role add --project service --user cinder admin</span><br><span class="line">创建cinder和cinder v2服务实体（最好是创建v2 v3）</span><br><span class="line">openstack service create --name cinder --description &quot;OpenStack block storage&quot; volume</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2020/04/07/G6z3iq.png" alt="G6z3iq.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openstack service create --name cinderv2 --description &quot;OpenStack block storage&quot; volumev2</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2020/04/07/G6zcQO.png" alt="G6zcQO.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">创建API endpoint</span><br><span class="line">openstack endpoint create --region RegionOne volume public http://controller:8776/v1/%\(tenant_id\)s</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2020/04/07/G6zhTA.png" alt="G6zhTA.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openstack endpoint create --region RegionOne volume internal http://controller:8776/v1/%\(tenant_id\)s</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2020/04/07/G6zqOg.png" alt="G6zqOg.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openstack endpoint create --region RegionOne volume admin http://controller:8776/v1/%\(tenant_id\)s</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2020/04/07/Gc1Wng.png" alt="Gc1Wng.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openstack endpoint create --region RegionOne volumev2 public http://controller:8776/v2/%\(tenant_id\)s</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2020/04/07/Gc8YLD.png" alt="Gc8YLD.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openstack endpoint create --region RegionOne volumev2 internal http://controller:8776/v2/%\(tenant_id\)s</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2020/04/07/Gc8vf1.png" alt="Gc8vf1.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">openstack endpoint create --region RegionOne volumev2 admin http://controller:8776/v2/%\(tenant_id\)s</span><br></pre></td></tr></table></figure><p><img src="https://s1.ax1x.com/2020/04/07/GcGEtA.png" alt="GcGEtA.png"></p><p>安装和配置cinder组件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y openstack-cinder</span><br></pre></td></tr></table></figure><p>编辑/etc/cinder.conf文件：<br>配置数据库连接：</p><p><img src="https://s1.ax1x.com/2020/04/07/GcYrS1.png" alt="GcYrS1.png"></p><p>配置rabbitmq：<br><img src="https://s1.ax1x.com/2020/04/07/GcYolt.png" alt="GcYolt.png"><br><img src="https://s1.ax1x.com/2020/04/07/GcYbm8.png" alt="GcYbm8.png"><br>配置认证服务：<br><img src="https://s1.ax1x.com/2020/04/07/GcYXkQ.png" alt="GcYXkQ.png"><br><img src="https://s1.ax1x.com/2020/04/07/Gcti0U.png" alt="Gcti0U.png"><br>配置节点管理IP地址：<br><img src="https://s1.ax1x.com/2020/04/07/Gct7C9.png" alt="Gct7C9.png"><br>配置锁路径：<br><img src="https://s1.ax1x.com/2020/04/07/Gctqjx.png" alt="Gctqjx.png"><br>将cinder服务信息同步到数据库（忽略输出中不推荐的信息）：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/bin/sh -c &quot;cinder-manage db sync&quot; cinder</span><br></pre></td></tr></table></figure><p>编辑nova.conf：<br><img src="https://s1.ax1x.com/2020/04/07/GcN9Cd.png" alt="GcN9Cd.png"><br>服务启动：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart openstack-nova-api</span><br><span class="line">systemctl enable openstack-cinder-api openstack-cinder-scheduler</span><br><span class="line">systemctl restart openstack-cinder-api openstack-cinder-scheduler</span><br></pre></td></tr></table></figure><p>25、安装和配置存储节点（cinder）</p><ul><li>安装并启动lvm2</li><li>创建逻辑卷和卷组</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">pvcreate /dev/sdb</span><br><span class="line">vgcreate cinder-volumes /dev/sdb</span><br><span class="line">```</span><br><span class="line">cinder块存储卷一般只能被虚拟机实例访问使用，但是存储节点操作系统可以管理包括磁盘在内的本地硬件设备，操作系统中的LVM卷扫描工具可以扫描/dev目录下的所有设备，如果项目在他们的卷上使用LVM，扫描工具检测到这些卷时会尝试缓存它们，可能会在底层操作系统和项目卷上产生各种问题。您必须重新配置LVM，让它只扫描包含``cinder-volume``卷组的设备。</span><br><span class="line"></span><br><span class="line">编辑``/etc/lvm/lvm.conf``文件并完成下面的操作：</span><br><span class="line"></span><br><span class="line">![GcNM2n.png](https://s1.ax1x.com/2020/04/07/GcNM2n.png)</span><br><span class="line"></span><br><span class="line">每个过滤器组中的元素都以``a``开头，即为 accept，或以 r 开头，即为**reject**，并且包括一个设备名称的正则表达式规则。过滤器组必须以``r/.*/``结束，过滤所有保留设备。您可以使用 :命令:`vgs -vvvv` 来测试过滤器。</span><br><span class="line"></span><br><span class="line">* 安装组件</span><br></pre></td></tr></table></figure><p>yum install openstack-cinder targetcli python-keystone -y</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">* 编辑配置文件：</span><br><span class="line">配置数据库：</span><br><span class="line">![GcNwx1.png](https://s1.ax1x.com/2020/04/07/GcNwx1.png)</span><br><span class="line">配置MQ：</span><br><span class="line">![GcNfxI.png](https://s1.ax1x.com/2020/04/07/GcNfxI.png)</span><br><span class="line">[![GcNORs.png](https://s1.ax1x.com/2020/04/07/GcNORs.png)](https://imgchr.com/i/GcNORs)</span><br><span class="line">配置认证：</span><br><span class="line">![GcUFJJ.png](https://s1.ax1x.com/2020/04/07/GcUFJJ.png)</span><br><span class="line">![GcUVQ1.png](https://s1.ax1x.com/2020/04/07/GcUVQ1.png)</span><br><span class="line">配置my_ip：</span><br><span class="line">![GcU4fJ.png](https://s1.ax1x.com/2020/04/07/GcU4fJ.png)</span><br><span class="line">配置lvm：</span><br><span class="line">![GcaMn0.png](https://s1.ax1x.com/2020/04/07/GcaMn0.png)</span><br><span class="line">![GcaQBV.png](https://s1.ax1x.com/2020/04/07/GcaQBV.png)</span><br><span class="line">配置镜像位置：</span><br><span class="line">![GcaGh4.png](https://s1.ax1x.com/2020/04/07/GcaGh4.png)</span><br><span class="line">配置锁路径：</span><br><span class="line">![Gcd9C4.png](https://s1.ax1x.com/2020/04/07/Gcd9C4.png)</span><br><span class="line">* 配置启动：</span><br></pre></td></tr></table></figure><p>systemctl enable openstack-cinder-volume.service target.service<br>systemctl start openstack-cinder-volume.service target.service</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">* 验证：</span><br><span class="line">source admin-openrc</span><br><span class="line">[![GcdeUO.png](https://s1.ax1x.com/2020/04/07/GcdeUO.png)](https://imgchr.com/i/GcdeUO)</span><br><span class="line">如果报错：</span><br><span class="line">ERROR: publicURL endpoint for volumev3 service not found</span><br><span class="line"></span><br><span class="line">在admin-openrc中加入：</span><br></pre></td></tr></table></figure><p>export OS_VOLUME_API_VERSION=2</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">加载demo脚本并创建一个1G的卷：</span><br></pre></td></tr></table></figure><p>source demo-openrc<br>cinder create  --name test1 1</p><pre><code>![GcdRG4.png](https://s1.ax1x.com/2020/04/07/GcdRG4.png)然后查看所创建的卷：![GcdLJe.png](https://s1.ax1x.com/2020/04/07/GcdLJe.png)</code></pre>]]></content:encoded>
      
      <comments>https://Chainyinghao.github.io/2020/03/09/openstack-1/#disqus_thread</comments>
    </item>
    
    <item>
      <title>openstack（一）</title>
      <link>https://Chainyinghao.github.io/2020/03/09/openstack/</link>
      <guid>https://Chainyinghao.github.io/2020/03/09/openstack/</guid>
      <pubDate>Mon, 09 Mar 2020 09:40:00 GMT</pubDate>
      <description>
      
        
        
          &lt;h3 id=&quot;关于openstack的服务组件&quot;&gt;关于openstack的服务组件&lt;/h3&gt;
&lt;p&gt;&lt;img src=&quot;https://s1.ax1x.com/2020/03/15/838Fqe.png&quot; alt=&quot;838Fqe.png&quot;&gt;&lt;/p&gt;
&lt;p&gt;    1、keyst
        
      
      </description>
      
      <content:encoded><![CDATA[<h3 id="关于openstack的服务组件">关于openstack的服务组件</h3><p><img src="https://s1.ax1x.com/2020/03/15/838Fqe.png" alt="838Fqe.png"></p><p>    1、keystone：为各服务组件提供用户认证和权限验证功能<br>    2、ceilometer：为各服务组件提供监控、检索和计量功能<br>    3、horizon：为用户操作各服务组件提供基于web形式的图形界面<br>    4、glance：为虚拟机实例提供镜像服务，同时，glance服务中的镜像介质存放在swift中<br>    5、neutron：为虚拟机实例提供网络连接服务，同时也为ironic提供PXE网络<br>    6、ironic：提供物理机的添加、删除、电源管理和安装部署等功能<br>    7、Nova：为虚拟机实例提供计算资源<br>    8、trove：为虚拟机镜像提供注册服务；使用Nova启动数据库实例；依附虚拟机实例，提供数据存储、操作和管理；可以备份数据库实例到swift中。<br>    9、cinder：为虚拟机实例提供块设备，同时备份块设备数据到swift中<br>    10、Sahara：通过heat编排集群配置；在swift中保存数据或二进制文件，将任务分派给虚拟机实例处理，通过Nova运行数据处理实例。在glance中注册Hadoop。<br>    11、heat：可以编排cinder、neutron、glance和Nova各种资源</p><h3 id="创建云主机的流程">创建云主机的流程</h3><p><img src="https://s1.ax1x.com/2020/03/15/83GJmD.png" alt="83GJmD.png"></p><p>    1、界面或者是命令行通过restful API向keystone获取认证信息。<br>    2、keystone通过用户请求认证信息，并生成auth-token返回给对应的认证请求。<br>    3、界面或者是命令行通过restful API向nova-api发送一个boot instance的请求（携带上认证生成auth-token），包含所6要创建的虚拟机的信息，如CPU、内存、硬盘、网络等。<br>    4、nova-api收到请求后向keystone发送请求去验证是否是有效的用户和token。<br>    5、keystone返回其验证结果。<br>    6、通过认证后nova-api和数据库进行通信。<br>    7、数据库记录新建云主机的信息。<br>    8、nova-api通过rpc.call向nova-scheduler请求是否有创建虚拟机的资源，让其进行资源的调度。<br>    9、nova-scheduler监听MQ队列中的消息，然后从中获取到请求。<br>    10、nova-scheduler通过查询nova数据库中计算资源的情况，并通过调度算法计算符合虚拟机创建的节点。<br>    11、对于有符合虚拟机创建的主机，nova-scheduler更新数据库中虚拟机对应的物理主机的信息。<br>    12、nova-scheduler通过rpc-cast向nova-compute发送对应的创建虚拟机请求的消息，让它去负责创建VM。<br>    13、nova-compute从对应的消息队列中获取创建虚拟机请求的消息。<br>    14、nova-compute通过rpc.call向nova-conductor请求获取虚拟机消息（flavor）。<br>    15、nova-conductor从MQ中获取到请求消息。<br>    16、nova-conductor查询虚拟机对应的信息。<br>    17、nova-conductor从数据库获取虚拟机对应信息。<br>    18、nova-conductor把虚拟机信息发给MQ。<br>    19、nova-compute从MQ中获取信息。<br>    20、nova-compute向keystone请求token，并通过HTTP请求向glance-api获取虚拟机所需要的镜像<br>    21、glance-api向keystone验证该token是否有效。<br>    22、通过验证后，nova-compute获取到该镜像的信息（URL）。<br>    23、nova-compute向keystone请求token，并通过HTTP请求neutron-server获取创建虚机所需要的网络信息。<br>    24、neutron-server收到后，向keystone验证。<br>    25、验证通过后，nova-compute得到一个网络信息。<br>    26、nova-compute向keystone请求token，用来向cinder获取相应的持久化存储信息。<br>    27、cinder向keystone验证，并返回结果。<br>    28、验证通过后，nova-compute获得该信息。<br>    29、nova-compute根据instance的信息调用配置的虚拟化驱动来创建虚拟机。</p>]]></content:encoded>
      
      <comments>https://Chainyinghao.github.io/2020/03/09/openstack/#disqus_thread</comments>
    </item>
    
    <item>
      <title>ipv6</title>
      <link>https://Chainyinghao.github.io/2020/03/09/ipv6-1/</link>
      <guid>https://Chainyinghao.github.io/2020/03/09/ipv6-1/</guid>
      <pubDate>Mon, 09 Mar 2020 09:38:39 GMT</pubDate>
      <description>
      
        
        
          &lt;h3 id=&quot;开启IPV6&quot;&gt;开启IPV6&lt;/h3&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;l
        
      
      </description>
      
      <content:encoded><![CDATA[<h3 id="开启IPV6">开启IPV6</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">加载ipv6模块：</span><br><span class="line">modprobe ipv6</span><br><span class="line"></span><br><span class="line">vi /etc/modprobe.d/disable_ipv6.conf</span><br><span class="line">#alias net-pf-10 off      #注释掉</span><br><span class="line">options ipv6 disable=0     #修改为0</span><br><span class="line"></span><br><span class="line">vi /etc/sysctl.conf</span><br><span class="line">net.ipv6.conf.all.disable_ipv6 = 0</span><br><span class="line">net.ipv6.conf.default.disable_ipv6 = 0</span><br><span class="line">net.ipv6.conf.lo.disable_ipv6 = 0</span><br><span class="line">sysctl -p</span><br></pre></td></tr></table></figure><p>    这时重启网络后会生成链路本地地址（Link-local address），如图：</p><p><img src="https://s2.ax1x.com/2020/03/10/8CcZtS.png" alt="8CcZtS.png"></p><h3 id="配置IPV6地址">配置IPV6地址</h3><h4 id="手动配置">手动配置</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ifconfig eth1 inet6 add 2001:470:18:ac4::2/64</span><br></pre></td></tr></table></figure><h4 id="自动获取">自动获取</h4><h5 id="centos">centos</h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/sysconfig/network-scripts/ifcfg-eth0</span><br><span class="line"></span><br><span class="line">BOOTPROTO=none</span><br><span class="line">DEFROUTE=yes</span><br><span class="line">DEVICE=eth0</span><br><span class="line">DHCPV6C=yes</span><br><span class="line">TYPE=Ethernet</span><br><span class="line">PEERDNS=yes</span><br><span class="line">PEERROUTES=yes</span><br><span class="line">IPV6INIT=yes</span><br><span class="line">IPV6_AUTOCONF=yes</span><br><span class="line">IPV6_DEFROUTE=yes</span><br><span class="line">IPV6_PEERDNS=yes</span><br><span class="line">IPV6_PEERROUTES=yes</span><br><span class="line">IPV6_FAILURE_FATAL=no</span><br><span class="line">NAME=eth0</span><br><span class="line">ONBOOT=yes</span><br></pre></td></tr></table></figure><h4 id="ubuntu14-16">ubuntu14/16</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/network/interfaces.d/eth0.cfg或者/etc/network/interfaces</span><br><span class="line"></span><br><span class="line">auto eth0</span><br><span class="line">iface eth0 inet6 dhcp</span><br></pre></td></tr></table></figure><h4 id="ubuntu18">ubuntu18</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/netplan/50-cloud-init.yaml</span><br><span class="line">network:</span><br><span class="line">  version: 2</span><br><span class="line">  ethernets:</span><br><span class="line">     ens3:</span><br><span class="line">          dhcp6: true</span><br></pre></td></tr></table></figure><h4 id="debian">debian</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">vim  /etc/network/interface</span><br><span class="line">iface eth0 inet6 auto</span><br><span class="line">up sleep 5</span><br><span class="line">up dhclient -1 -6 -cf /etc/dhcp/dhclient6.conf -lf /var/lib/dhcp/dhclient6.eth0.leases -v eth0 || true</span><br></pre></td></tr></table></figure><h4 id="OpenSUSE42-3">OpenSUSE42.3</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">Vim /etc/sysconfig/network/ifcfg-eth0</span><br><span class="line"></span><br><span class="line">BOOTPROTO=dhcp6</span><br><span class="line">IPV6INIT=yes</span><br><span class="line">DHCPV6C=yes</span><br><span class="line">DHCLIENT6_MODE=managed</span><br><span class="line">STARTMODE=auto</span><br></pre></td></tr></table></figure><p>注：也可以通过dhclient -6 -d [ 网卡 ]来获取</p><h4 id="ipv6镜像在openstack平台上相关问题">ipv6镜像在openstack平台上相关问题</h4><p>    最近在openstack平台上进行镜像测试的时候，发现在ipv6网络下的一些问题。</p><h5 id="ipv6的网络无法下发网卡配置">ipv6的网络无法下发网卡配置</h5><p>    像centos8，openSUSE42.3镜像在ipv6的网络下，cloud-init没有下发相应的配置，导致一直获取不到ipv6的地址。通过修改cloud-init网络部分的源码来解决（/usr/lib/python2.7/site-packages/cloudinit/net/sysconfig.py）。</p><p><img src="https://s2.ax1x.com/2020/03/10/8C4qII.png" alt="8C4qII.png"></p><p>    但是对于cloud-init是低版本的而言，没有这个文件，最后解决办法是在/var/lib/cloud/scripts/per-instance路径下，添加一个脚本，在初始化每个实例的时候才会去执行这些脚本，并且脚本只有在初始网络是ipv6的情况下才会去执行：</p><p><a href="https://imgchr.com/i/8C5X79" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2020/03/10/8C5X79.png" alt="8C5X79.png"></a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line"></span><br><span class="line">###centos</span><br><span class="line"></span><br><span class="line">function update_eth0()&#123;</span><br><span class="line">    echo &quot;TYPE=Ethernet&quot; &gt; /etc/sysconfig/network-scripts/ifcfg-eth0</span><br><span class="line">    echo &quot;BOOTPROTO=dhcp6&quot; &gt;&gt; /etc/sysconfig/network-scripts/ifcfg-eth0</span><br><span class="line">    echo &quot;DEFROUTE=yes&quot; &gt;&gt; /etc/sysconfig/network-scripts/ifcfg-eth0 </span><br><span class="line">    echo &quot;PEERDNS=yes&quot; &gt;&gt; /etc/sysconfig/network-scripts/ifcfg-eth0</span><br><span class="line">    echo &quot;PEERROUTES=yes&quot; &gt;&gt; /etc/sysconfig/network-scripts/ifcfg-eth0</span><br><span class="line">    echo &quot;IPV6INIT=yes&quot; &gt;&gt; /etc/sysconfig/network-scripts/ifcfg-eth0</span><br><span class="line">    echo &quot;IPV6_AUTOCONF=yes&quot; &gt;&gt; /etc/sysconfig/network-scripts/ifcfg-eth0</span><br><span class="line">    echo &quot;IPV6_DEFROUTE=yes&quot; &gt;&gt; /etc/sysconfig/network-scripts/ifcfg-eth0</span><br><span class="line">    echo &quot;IPV6_PEERDNS=yes&quot; &gt;&gt; /etc/sysconfig/network-scripts/ifcfg-eth0</span><br><span class="line">    echo &quot;IPV6_PEERROUTES=yes&quot; &gt;&gt; /etc/sysconfig/network-scripts/ifcfg-eth0</span><br><span class="line">    echo &quot;IPV6_FAILURE_FATAL=no&quot; &gt;&gt; /etc/sysconfig/network-scripts/ifcfg-eth0</span><br><span class="line">    echo &quot;DHCPV6C=yes&quot; &gt;&gt; /etc/sysconfig/network-scripts/ifcfg-eth0 </span><br><span class="line">    echo &quot;NAME=eth0&quot; &gt;&gt; /etc/sysconfig/network-scripts/ifcfg-eth0</span><br><span class="line">    echo &quot;DEVICE=eth0&quot;  &gt;&gt; /etc/sysconfig/network-scripts/ifcfg-eth0</span><br><span class="line">    echo &quot;ONBOOT=yes&quot;  &gt;&gt; /etc/sysconfig/network-scripts/ifcfg-eth0</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">function update()&#123;</span><br><span class="line">    mount /dev/sr0 /mnt</span><br><span class="line">    cat /mnt/openstack/latest/network_data.json | python -m json.tool &gt; /tmp/file1</span><br><span class="line">    NETWORK_TYPE=`cat /tmp/file1 | grep -i type|awk -F&quot;:&quot; &apos;&#123;print $2&#125;&apos;|sed -n 2p|sed &apos;s/\&quot;//g&apos;`</span><br><span class="line"></span><br><span class="line">    if [ $NETWORK_TYPE == &apos;ipv6_dhcpv6-stateful&apos; ];then</span><br><span class="line">        update_eth0</span><br><span class="line">        service network restart</span><br><span class="line">    fi</span><br><span class="line">    umount /mnt</span><br><span class="line">    rm -rf /tmp/file1</span><br><span class="line">    </span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">update</span><br></pre></td></tr></table></figure><p>    因为这边都是通过ipv6有状态方式去下放ip地址，所以判断条件就写死。</p><h5 id="没有获取到默认路由，导致无法通信">没有获取到默认路由，导致无法通信</h5><p>    查看ipv6的路由表，发现缺少默认路由：</p><p><a href="https://imgchr.com/i/8CobdJ" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2020/03/10/8CobdJ.png" alt="8CobdJ.png"></a></p><p>注：图中标红为正常主机应有现象，迭代前缺少，导致无法通信</p><p>此时：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">vim /etc/sysctl.conf</span><br><span class="line"></span><br><span class="line">net.ipv6.conf.default.accept_ra = 1</span><br><span class="line">net.ipv6.conf.all.accept_ra = 1</span><br><span class="line">net.ipv6.conf.eth0.accept_ra = 1</span><br><span class="line"></span><br><span class="line">sysctl -p</span><br><span class="line"></span><br><span class="line">重启主机</span><br><span class="line"></span><br><span class="line">注：此时允许接收ra报文，因为默认路由消息是在ra报文里面</span><br></pre></td></tr></table></figure>]]></content:encoded>
      
      <comments>https://Chainyinghao.github.io/2020/03/09/ipv6-1/#disqus_thread</comments>
    </item>
    
  </channel>
</rss>
